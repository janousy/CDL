# Fashion-MNIST GITLAB PIPELINE
# Stages within this pipeline pull existing images such that a job completes faster
# If you have not yet pushed these images (e.g. you switched image registry), update the pipeline by commenting out docker pulls

stages:
    - build-train-image
    - test-model
    - write-report
    - build-model-master
    - build-model-dev
    - deploy-model-master

variables:
    # $CI_REGISTRY_USER & $CI_REGISTRY_PASSWORD are GitLab variables, set these!
    MODEL_NAME: "fashion-classifier"
    DET_MASTER: http://10.64.140.43:8080

    # although not best practice, we work with two tags for images
    # for a more sophisticated approach, consider using $CI_COMMIT_SHA as image tags
    DEV_TAG: "dev"
    PROD_TAG: "prod"

    # if you change the repository structure, update these paths accordingly
    TRAIN_IMAGE_NAME: "fmnist-train"
    TRAIN_IMAGE_DOCKER_PATH: "fmnist/model/Dockerfile"
    TEST_IMAGE_NAME: "fmnist-test"
    TEST_IMAGE_DOCKER_PATH: "fmnist/test/Dockerfile"
    MODEL_TEST_PATH: "fmnist/test/test_model_accuracy.py"
    MODEL_IMAGE_NAME: "fmnist-seldon"
    MODEL_IMAGE_DOCKER_PATH: "fmnist/deploy/Dockerfile"
    DEPLOY_MANIFEST_PATH: "fmnist/deploy/deploy.yaml"

    # the following variables are necessary to reach the docker daemon socket on microk8s,
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2

build-train-image:
  stage: build-train-image
  image: docker:latest
  services:
    - docker:19.03.12-dind
  before_script:
    - docker info
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_USER/$TRAIN_IMAGE_NAME:$DEV_TAG
    - docker build -t $CI_REGISTRY_USER/$TRAIN_IMAGE_NAME:$DEV_TAG -f $TRAIN_IMAGE_DOCKER_PATH .
    - docker push "$CI_REGISTRY_USER/$TRAIN_IMAGE_NAME:$DEV_TAG"
  only:
    changes:
      - $TRAIN_IMAGE_DOCKER_PATH
      - fmnist/model/src/requirements.txt

test-model:
  stage: test-model
  image: determinedai/environments:py-3.7-pytorch-1.7-tf-1.15-cpu-0.11.0
  script:
    - pip install -q --upgrade pip
    - pip install -r fmnist/test/requirements.txt
    - python -m unittest -v $MODEL_TEST_PATH

write-report:
  stage: write-report
  image: determinedai/environments:py-3.7-pytorch-1.7-tf-1.15-cpu-0.11.0
  script:
    - pip install -q --upgrade pip
    - pip install -q determined==0.15.1
    - det -m $DET_MASTER model list-versions $MODEL_NAME | tee summary.md
  artifacts:
    paths:
      - summary.md
    expire_in: 7 day
  needs: ["test-model"]

#build-model-dev:
#   # Official docker image.
#  stage: build-model-dev
#  image: docker:latest
#  services:
#    - docker:19.03.12-dind
#  before_script:
#    - docker info
#    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
#  script:
#    - docker build -t $CI_REGISTRY_USER/$MODEL_IMAGE_NAME:$CI_COMMIT_SHA -f $MODEL_IMAGE_DOCKER_PATH .
#    - docker push "$CI_REGISTRY_USER/$MODEL_IMAGE_NAME:$CI_COMMIT_SHA"

build-model-master:
  stage: build-model-master
  image: docker:latest
  services:
    - docker:19.03.12-dind
  before_script:
    - docker info
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull "$CI_REGISTRY_USER/$MODEL_IMAGE_NAME:$PROD_TAG"
    - docker build -t $CI_REGISTRY_USER/$MODEL_IMAGE_NAME:$PROD_TAG -f $MODEL_IMAGE_DOCKER_PATH .
    - docker push "$CI_REGISTRY_USER/$MODEL_IMAGE_NAME:$PROD_TAG"
  needs: ["test-model"]
  only:
    - master

deploy-model-master:
    stage: deploy-model-master
    image: bitnami/kubectl
    script:
      - echo $KUBE_URL
      - echo $KUBECONFIG
      - kubectl replace -f $DEPLOY_MANIFEST_PATH --force
    needs: ["build-model-master"]
    only:
      - master